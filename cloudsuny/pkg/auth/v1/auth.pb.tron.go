// Code generated by tron1.1.0. DO NOT EDIT.

package auth

import (
	context "context"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	transport "github.com/loghole/tron/transport"
	grpc "google.golang.org/grpc"
)

// AuthenticationServiceDesc is description for the AuthenticationServer.
type AuthenticationServiceDesc struct {
	svc AuthenticationServer
}

func NewAuthenticationServiceDesc(i AuthenticationServer) transport.ServiceDesc {
	return &AuthenticationServiceDesc{svc: i}
}

func (d *AuthenticationServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterAuthenticationServer(s, d.svc)
}

func (d *AuthenticationServiceDesc) RegisterHTTP(mux *runtime.ServeMux) {
	RegisterAuthenticationHandlerServer(context.Background(), mux, d.svc)
}

func (d *AuthenticationServiceDesc) SwaggerDef() []byte {
	return []byte(`{
  "swagger": "2.0",
  "info": {
    "title": "auth.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/auth/sign_in": {
      "post": {
        "summary": "Устанавливает клиенту сессионный cookie с помощью которого можно получить доступ к дополнительным методам.",
        "operationId": "Authentication_SignIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth.v1.SignInResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.v1.SignInReq"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/sign_out": {
      "post": {
        "summary": "Выходит из текущей сессии если она валидна. Сессия удаляется как на стороне клиента, так и в БД.",
        "operationId": "Authentication_SignOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth.v1.SignOutResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.v1.SignOutReq"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    }
  },
  "definitions": {
    "auth.v1.SignInReq": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "auth.v1.SignInResp": {
      "type": "object"
    },
    "auth.v1.SignOutReq": {
      "type": "object"
    },
    "auth.v1.SignOutResp": {
      "type": "object"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
`)
}
